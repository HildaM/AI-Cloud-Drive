// Code generated by MockGen. DO NOT EDIT.
// Source: file.go

// Package file is a generated GoMock package.
package file

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDao is a mock of Dao interface.
type MockDao struct {
	ctrl     *gomock.Controller
	recorder *MockDaoMockRecorder
}

// MockDaoMockRecorder is the mock recorder for MockDao.
type MockDaoMockRecorder struct {
	mock *MockDao
}

// NewMockDao creates a new mock instance.
func NewMockDao(ctrl *gomock.Controller) *MockDao {
	mock := &MockDao{ctrl: ctrl}
	mock.recorder = &MockDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDao) EXPECT() *MockDaoMockRecorder {
	return m.recorder
}

// CountFilesByKeyword mocks base method.
func (m *MockDao) CountFilesByKeyword(key string, userID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFilesByKeyword", key, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFilesByKeyword indicates an expected call of CountFilesByKeyword.
func (mr *MockDaoMockRecorder) CountFilesByKeyword(key, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFilesByKeyword", reflect.TypeOf((*MockDao)(nil).CountFilesByKeyword), key, userID)
}

// CountFilesByParentID mocks base method.
func (m *MockDao) CountFilesByParentID(parentID *string, userID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFilesByParentID", parentID, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFilesByParentID indicates an expected call of CountFilesByParentID.
func (mr *MockDaoMockRecorder) CountFilesByParentID(parentID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFilesByParentID", reflect.TypeOf((*MockDao)(nil).CountFilesByParentID), parentID, userID)
}

// CreateFile mocks base method.
func (m *MockDao) CreateFile(file *File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockDaoMockRecorder) CreateFile(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockDao)(nil).CreateFile), file)
}

// DeleteFile mocks base method.
func (m *MockDao) DeleteFile(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockDaoMockRecorder) DeleteFile(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockDao)(nil).DeleteFile), id)
}

// GetDocumentDir mocks base method.
func (m *MockDao) GetDocumentDir(userID uint) (*File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentDir", userID)
	ret0, _ := ret[0].(*File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentDir indicates an expected call of GetDocumentDir.
func (mr *MockDaoMockRecorder) GetDocumentDir(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentDir", reflect.TypeOf((*MockDao)(nil).GetDocumentDir), userID)
}

// GetFileMetaByFileID mocks base method.
func (m *MockDao) GetFileMetaByFileID(id string) (*File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileMetaByFileID", id)
	ret0, _ := ret[0].(*File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileMetaByFileID indicates an expected call of GetFileMetaByFileID.
func (mr *MockDaoMockRecorder) GetFileMetaByFileID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileMetaByFileID", reflect.TypeOf((*MockDao)(nil).GetFileMetaByFileID), id)
}

// GetFilesByKeyword mocks base method.
func (m *MockDao) GetFilesByKeyword(userID uint, key string, page, pageSize int, sort string) ([]File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesByKeyword", userID, key, page, pageSize, sort)
	ret0, _ := ret[0].([]File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesByKeyword indicates an expected call of GetFilesByKeyword.
func (mr *MockDaoMockRecorder) GetFilesByKeyword(userID, key, page, pageSize, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesByKeyword", reflect.TypeOf((*MockDao)(nil).GetFilesByKeyword), userID, key, page, pageSize, sort)
}

// GetFilesByParentID mocks base method.
func (m *MockDao) GetFilesByParentID(userID uint, parentID *string) ([]File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesByParentID", userID, parentID)
	ret0, _ := ret[0].([]File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesByParentID indicates an expected call of GetFilesByParentID.
func (mr *MockDaoMockRecorder) GetFilesByParentID(userID, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesByParentID", reflect.TypeOf((*MockDao)(nil).GetFilesByParentID), userID, parentID)
}

// ListFiles mocks base method.
func (m *MockDao) ListFiles(userID uint, parentID *string, page, pageSize int, sort string) ([]File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", userID, parentID, page, pageSize, sort)
	ret0, _ := ret[0].([]File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockDaoMockRecorder) ListFiles(userID, parentID, page, pageSize, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockDao)(nil).ListFiles), userID, parentID, page, pageSize, sort)
}

// UpdateFile mocks base method.
func (m *MockDao) UpdateFile(file *File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFile", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFile indicates an expected call of UpdateFile.
func (mr *MockDaoMockRecorder) UpdateFile(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockDao)(nil).UpdateFile), file)
}
